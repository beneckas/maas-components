buildscript {
    ext {
        compose_version = '1.0.0-alpha07'
        kotlin_version = "1.4.10"
    }
    repositories {
        google()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0-alpha16'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:9.3.0"
    }
}

allprojects {
    version = '0.1.0-dev03-SNAPSHOT'

    repositories {
        google()
        jcenter()
    }
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            apply plugin: "org.jlleitschuh.gradle.ktlint"
            ktlint {
                version = "0.39.0"
                android = true
            }
        }
    }
}

subprojects { project ->
    afterEvaluate {
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
            kotlinOptions {
                jvmTarget = '1.8'
                // avoid kotlin_module clash for projects with the same name, e.g. 'ui' & 'routes:ui"
                // https://discuss.kotlinlang.org/t/dealing-with-kotlin-module-conflict-when-building-apk-for-project-with-non-unique-project-names/11247
                if (project.hasProperty('PUBLISH_ARTIFACT_ID')) {
                    freeCompilerArgs += ['-module-name', "com.trafi.maas.$PUBLISH_ARTIFACT_ID"]
                }
            }
        }
    }
}

// maven-publish treats a dependency on a Kotlin Multiplatform project as a dependency on the
// kotlinMultiplatform publication. However, we only publish the androidRelease publication. To
// ensure correct dependencies in the POM files, we declare a direct dependency on the Android
// publication, then substitute it back to have a "project" dependency.
// Idea borrowed from kotlinx.coroutines
// https://github.com/Kotlin/kotlinx.coroutines/blob/72238976ac6c06f7b1f6a72d51a41b0573bbc225/build.gradle#L252
subprojects {
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute module("com.trafi.maas:core-android:$version") with project(':common:core')
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
